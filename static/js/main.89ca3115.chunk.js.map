{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","App","useState","account","setAccount","goldBalance","setGoldBalance","window","ethereum","enable","then","contractABI","className","variant","onClick","console","log","web3","eth","sendTransaction","to","from","value","utils","toWei","gasPrice","gasLimit","err","transactionHash","Contract","methods","getMetalBalance","call","error","result","updateBalance","send","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","Web3","currentProvider","providers","HttpProvider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89ca3115.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 312;","import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [account, setAccount] = useState(\"\");\r\n  const [goldBalance, setGoldBalance] = useState(\r\n      \"Click to find gold holding amount\");\r\n  window.ethereum.enable().then(setAccount);\r\n  const contractABI = [{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"metalName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"metalName\",\"type\":\"string\"}],\"name\":\"getMetalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metalName\",\"type\":\"string\"}],\"name\":\"MetalBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}];\r\n\r\n  function sendContract() {\r\n    const contract = new window.web3.eth.Contract(contractABI,\r\n        \"0xF32B2d84C8a8924cfF3D8D2F2D8635c089a2427D\");\r\n    contract.methods.updateBalance(\"GOLD\", \"5500000\").send({\r\n      from: account[0],\r\n      gasPrice: 20000000000\r\n    }, function (error, result) {\r\n    }).then(console.log);\r\n  }\r\n\r\n  function callContract() {\r\n    const contract = new window.web3.eth.Contract(contractABI,\r\n        \"0xF32B2d84C8a8924cfF3D8D2F2D8635c089a2427D\");\r\n    contract.methods.getMetalBalance(\"GOLD\").call({from: account[0]},\r\n        function (error, result) {\r\n        }).then(setGoldBalance);\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Button variant=\"outline-primary\"\r\n                  onClick={() => {\r\n                    console.log(account[0]);\r\n                    window.web3.eth.sendTransaction({\r\n                      to: \"0x000000000ce9873e7ba322d68c75bf50d7c7bb76\",\r\n                      from: account[0],\r\n                      value: window.web3.utils.toWei(\"0.01\", \"ether\"),\r\n                      gasPrice: \"20000000000\",\r\n                      gasLimit: \"21000\"\r\n                    }, function (err, transactionHash) {\r\n                      if (!err) {\r\n                        console.log(transactionHash);\r\n                      }\r\n                    });\r\n                  }}\r\n          >{account}</Button>\r\n          <Button variant=\"outline-primary\"\r\n                  onClick={() => {\r\n                    callContract()\r\n                  }}\r\n          >{goldBalance}</Button>\r\n          <Button variant=\"outline-primary\"\r\n                  onClick={() => {\r\n                    sendContract()\r\n                  }}\r\n          >updateBalance(metalName,newAmount)</Button>\r\n        </header>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Web3 from 'web3';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\nif (typeof window.web3 !== 'undefined') {\n  window.web3 = new Web3(window.web3.currentProvider);\n} else {\n  // set the provider you want from Web3.providers\n  window.web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}